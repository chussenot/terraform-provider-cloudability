package cloudability

import (
	"log"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/skyscrapr/cloudability-sdk-go/cloudability"
)

func resourceAccount() *schema.Resource {
	return &schema.Resource{
		Create: resourceAccountCreate,
		Read: resourceAccountRead,
		Delete: resourceAccountDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"vendor_account_name": {
				Type: schema.TypeString,
				Computed: true,
				Description: "The name given to your AWS account",
			},
			"vendor_account_id": {
				Type: schema.TypeString,
				Required: true,
				ForceNew: true,
				Description: "12 digit string corresponding to your AWS account ID",
			},
			"vendor_key": {
				Type: schema.TypeString,
				Optional: true,
				Default: "aws",
				ForceNew: true,
				Description: "'aws'",
			},
			"verification": {
				Type: schema.TypeSet,
				Computed: true,
				MaxItems: 1,
				Elem: &schema.Resource {
					Schema: map[string]*schema.Schema {
						"state": &schema.Schema {
							Type: schema.TypeString,
							Computed: true,
							Description: "Examples: unverified, verified, error",
						},
						"last_verification_attempted_at": &schema.Schema {
							Type: schema.TypeString,
							Computed: true,
							Description: "Date timestamp, example: 1970-01-01T00:00:00.000Z",
						},
						"message": &schema.Schema {
							Type: schema.TypeString,
							Computed: true,
							Description: "Error message for credentials in error state",
						},
					},				
				},
				Description: "Object containing details of verification state",
			},
			"authorization": {
				Type: schema.TypeSet,
				Computed: true,
				MaxItems: 1,
				Elem: &schema.Resource {
					Schema: map[string]*schema.Schema {
						"type": &schema.Schema {
							Type: schema.TypeString,
							Computed: true,
							Description: "'aws_role' or 'aws_user'",
						},
						"role_name": &schema.Schema {
							Type: schema.TypeString,
							Computed: true,
							Description: "currently hardcoded to 'CloudabilityRole'",
						},
						"external_id": &schema.Schema {
							Type: schema.TypeString,
							Computed: true,
							Description: "The external ID used to prevent confused deputies. Generated by Cloudability",
						},
					},				
				},
				Description: "Object contain vendor specific authorization details",
			},
			"parent_account_id": {
				Type: schema.TypeString,
				Computed: true,
				Description: "12 digit string representing parent's account ID (if current cred is a linked account)",
			},
			"created_at": {
				Type: schema.TypeString,
				Computed: true,
				Description: "Date timestamp corresponding to cloudability credential creation time",
			},
		},
	}
}

func resourceAccountCreate(d *schema.ResourceData, meta interface{}) error {
	vendorKey := d.Get("vendor_key").(string)
	accountId := d.Get("vendor_account_id").(string)
	
	client := meta.(*cloudability.CloudabilityClient)
	log.Printf("[DEBUG] resourceAccountCreate NewAccount [account_id: %q]", accountId)
	// TODO: Need to work out how to dynamically get the type
	// authorizationType := d.Get("authorization").(map[string]string)["type"]

	// TODO: Need to handle errors better. Ignoring for now.
	client.Vendors.NewAccount(vendorKey, accountId, "aws_role")
	// _, err := client.Vendors.NewAccount(vendorKey, accountId, "aws_role")
	// if err != nil {
	// 	return err
	// }
	return resourceAccountRead(d, meta)
}

func resourceAccountRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*cloudability.CloudabilityClient)

	vendorKey := d.Get("vendor_key").(string)
	accountId := d.Get("vendor_account_id").(string)
	account, err := client.Vendors.GetAccount(vendorKey, accountId)
	if err != nil {
		return err
	}

	if account != nil {
		d.Set("vendor_account_name", account.VendorAccountName)
		d.Set("vendor_account_id", account.VendorAccountId)
		d.Set("vendor_key", account.VendorKey)
		d.Set("verification", flattenVerification(account.Verification))
		d.Set("authorization", flattenAuthorization(account.Authorization))
		d.Set("parent_account_id", account.ParentAccountId)
		d.Set("created_at", account.CreatedAt)
		d.SetId(account.Id)
	}
	return nil
}

func resourceAccountDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*cloudability.CloudabilityClient) 
	vendorKey := d.Get("vendor_key").(string)
	accountId := d.Get("vendor_account_id").(string)
	err := client.Vendors.DeleteAccount(vendorKey, accountId)
	return err
}
